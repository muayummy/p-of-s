package hw4;

import java.util.ArrayList;
import java.util.List;

public class Graph<T, E> {
	private List<T> parent;
	private List<List<T>> adjList;
	private List<List<E>> edges;	
	private int numNode;
	
		
	public Graph() {
		parent = new ArrayList<T> ();
		adjList = new ArrayList<List<T>> ();
		edges = new ArrayList<List<E>> ();
		numNode = 0;
		checkRep();
	}
	
	public Graph(List<T> p, List<List<T>> a, List<List<E>> e, int n1) {
		parent = p;
		adjList = a;
		edges = e;
		numNode = n1;
		//checkRep();
	}
	
	public List<T> getParent() {
		//checkRep();
		return parent;
	}
	
	public List<List<T>> getAdjList() {
		//checkRep();
		return adjList;
	}
	
	public List<List<E>> getEdges() {
		//checkRep();
		return edges;
	}
	
	public E getEdge(T node1, T node2) {
		E temp ;
		for (int i = 0; i < parent.size(); i++) {
			for (int j = 0; j < edges.get(i).size(); j++) {
				if (parent.get(i) == node1 &&
					adjList.get(i).get(j) == node2) {
					temp = edges.get(i).get(j);
				}
			}
		}
		return temp;
	}
	
	public int parentSize() {
		return parent.size();
	}
	
	public int NumOfEdge() {
		int tempNum = 0;
		for (int i = 0; i < parent.size(); i++) {
			for (int j = 0; j < edges.get(i).size(); j++) {
				tempNum = tempNum + 1;
			}
		}
		//checkRep();
		return tempNum;
	}
	
	public void addNode(T nodeData) {
		parent.add(nodeData);
		numNode = numNode + 1;
		adjList.add(new ArrayList<T> ());
		edges.add(new ArrayList<E> ());
		//checkRep();
	}
	
	public void addEdge(T parentNode, T childNode, E edgeLabel) {
		for (int i = 0; i < parent.size(); i++) {
			if (parent.get(i) == parentNode) {
				adjList.get(i).add(childNode);
				edges.get(i).add(edgeLabel);
				numNode = numNode + 1;
			}
		}
		//checkRep();
	}
	
	public boolean hasNode(T n) {
		boolean flag = true;
		if (parent.contains(n)) {
			flag = false;
		}
		//checkRep();
		return flag;
	} 
	
	private void checkRep() throws RuntimeException {
		for (T i : parent) {
			if (i == null) {
				throw new RuntimeException("Parent nodes can not be null");
			}
		}
		for (int i = 0; i < adjList.size(); i++) {
			for (T j : adjList.get(i)) {
				if (j == null) {
					throw new RuntimeException("Child nodes can not be null");
				}
			}
		}
		for (int i = 0; i < edges.size(); i++) {
			for (E j : edges.get(i)) {
				if (j == null) {
					throw new RuntimeException("Edges can not be null");
				}
			}
		}
	}
}
